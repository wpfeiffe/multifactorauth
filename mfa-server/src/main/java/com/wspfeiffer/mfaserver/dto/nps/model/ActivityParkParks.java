/**
 * National Park Service
 * <p>This API is designed to provide authoritative National Park Service (NPS) data and content about parks and their facilities, events, news, alerts, and more. Explore the NPS API below and even try to make API calls. In order to try an API call, you'll need to click on the \"Authorize\" button below and add your API key. If you don't have an API key yet, visit our <a href=\"https://www.nps.gov/subjects/developer/get-started.htm\">Get Started page</a>.</p>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.wspfeiffer.mfaserver.dto.nps.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Objects;


/**
 * ActivityParkParks
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2023-11-26T07:44:36.946-05:00")
public class ActivityParkParks   {
  @JsonProperty("states")
  private String states = null;

  @JsonProperty("fullName")
  private String fullName = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("parkCode")
  private String parkCode = null;

  @JsonProperty("designation")
  private String designation = null;

  @JsonProperty("name")
  private String name = null;

  public ActivityParkParks states(String states) {
    this.states = states;
    return this;
  }

   /**
   * A comma delimited list of two letter state codes
   * @return states
  **/
  public String getStates() {
    return states;
  }

  public void setStates(String states) {
    this.states = states;
  }

  public ActivityParkParks fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

   /**
   * full name of a park
   * @return fullName
  **/
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }

  public ActivityParkParks url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public ActivityParkParks parkCode(String parkCode) {
    this.parkCode = parkCode;
    return this;
  }

   /**
   * Four letter alpha code for this park
   * @return parkCode
  **/
  public String getParkCode() {
    return parkCode;
  }

  public void setParkCode(String parkCode) {
    this.parkCode = parkCode;
  }

  public ActivityParkParks designation(String designation) {
    this.designation = designation;
    return this;
  }

   /**
   * Get designation
   * @return designation
  **/
  public String getDesignation() {
    return designation;
  }

  public void setDesignation(String designation) {
    this.designation = designation;
  }

  public ActivityParkParks name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the park
   * @return name
  **/
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityParkParks activityParkParks = (ActivityParkParks) o;
    return Objects.equals(this.states, activityParkParks.states) &&
        Objects.equals(this.fullName, activityParkParks.fullName) &&
        Objects.equals(this.url, activityParkParks.url) &&
        Objects.equals(this.parkCode, activityParkParks.parkCode) &&
        Objects.equals(this.designation, activityParkParks.designation) &&
        Objects.equals(this.name, activityParkParks.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(states, fullName, url, parkCode, designation, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityParkParks {\n");
    
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    parkCode: ").append(toIndentedString(parkCode)).append("\n");
    sb.append("    designation: ").append(toIndentedString(designation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

